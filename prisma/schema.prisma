// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// Define your models here
model users {
  user_id       Int       @id @default(autoincrement())
  first_name    String    @db.VarChar(100)
  last_name     String    @db.VarChar(100)
  email         String    @unique @db.VarChar(255)
  password_hash String    @db.VarChar(255)
  phone_number  String?   @db.VarChar(15)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  addresses     addresses[]
  orders        orders[]
  reviews       product_reviews[]
  shoppingCart  shopping_cart?
}

model addresses {
  address_id     Int       @id @default(autoincrement())
  user_id        Int
  address_line1  String    @db.VarChar(255)
  address_line2  String?   @db.VarChar(255)
  city           String    @db.VarChar(100)
  state          String?   @db.VarChar(100)
  postal_code    String    @db.VarChar(20)
  country        String    @db.VarChar(100)
  phone_number   String?   @db.VarChar(15)
  is_default     Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  user           users      @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model categories {
  category_id   Int       @id @default(autoincrement())
  name          String    @db.VarChar(100) @map("_name")
  description   String?   @db.Text @map("_description")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt

  products      products[]
}

model products {
  product_id    Int       @id @default(autoincrement())
  category_id   Int
  name          String    @db.VarChar(100)  @map("_name")
  description   String?   @db.Text  @map("_description")
  price         Float
  stock_quantity         Int
  image_url   String?   @db.Text 
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt

  category      categories  @relation(fields: [category_id], references: [category_id])
  orderItems    order_items[]
  reviews       product_reviews[]
  shopping_cart_items     shopping_cart_items[]

  @@index([category_id])
}

model orders {
  order_id      Int       @id @default(autoincrement())
  user_id       Int
  total_price  Float
  shipping_address        String    @db.VarChar(50)
  order_status        String    @db.VarChar(50)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt

  user          users      @relation(fields: [user_id], references: [user_id])
  orderItems    order_items[]
  payments      payments[]

  @@index([user_id])
}

model order_items {
  order_item_id Int       @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  unit_price         Float
  total_price         Float
  created_at    DateTime  @default(now())

  order         orders     @relation(fields: [order_id], references: [order_id])
  product       products   @relation(fields: [product_id], references: [product_id])

  @@index([order_id])
  @@index([product_id])
}

model payments {
  payment_id    Int       @id @default(autoincrement())
  order_id      Int
  amount        Float
  payment_method        String    @db.VarChar(50)
  payment_status        String    @db.VarChar(50)
  payment_date    DateTime  @default(now())

  order         orders     @relation(fields: [order_id], references: [order_id])

  @@index([order_id])
}

model product_reviews {
  review_id     Int       @id @default(autoincrement())
  user_id       Int
  product_id    Int
  rating        Int
  review_text        String
  created_at    DateTime  @default(now())

  user          users      @relation(fields: [user_id], references: [user_id])
  product       products   @relation(fields: [product_id], references: [product_id])

  @@index([user_id])
  @@index([product_id])
}

model shopping_cart {
  cart_id       Int       @id @default(autoincrement())
  user_id       Int       @unique
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt

  user          users      @relation(fields: [user_id], references: [user_id])
  cartItems     shopping_cart_items[]

  @@index([user_id])
}

model shopping_cart_items {
  cart_item_id  Int       @id @default(autoincrement())
  cart_id       Int
  product_id    Int
  quantity      Int
  added_at    DateTime  @default(now()) 

  cart          shopping_cart @relation(fields: [cart_id], references: [cart_id])
  product       products      @relation(fields: [product_id], references: [product_id])

  @@index([cart_id])
  @@index([product_id])
}